<?php

/**
 * @file
 * Install file for DRD module for initial installation and later udates.
 */

use Drupal\Component\Serialization\Yaml;
use Drupal\drd\Entity\Domain;
use Drupal\drd\Entity\Release;

/**
 * Implements hook_install().
 */
function drd_install() {
  $host = \Drupal::entityTypeManager()->getStorage('drd_host')->create([
    'name' => 'Localhost',
  ]);
  $host->save();
}

/**
 * Fix majorversion for drd_major entities.
 */
function drd_update_8001() {
  $majors = [];
  foreach (Release::loadMultiple() as $release) {
    /** @var \Drupal\drd\Entity\ReleaseInterface $release */
    $major = $release->getMajor();
    if (in_array($major->id(), $majors)) {
      continue;
    }
    $majors[] = $major->id();

    $version = $release->getVersion();
    $parts = explode('-', $version);
    list($coreversion,) = explode('.', $parts[0]);
    if (isset($parts[1])) {
      list($majorversion,) = explode('.', $parts[1]);
    }
    else {
      $majorversion = $coreversion;
    }

    if ($major->getCoreVersion() != $coreversion || $major->getMajorVersion() != $majorversion) {
      $major->setCoreVersion($coreversion);
      $major->setMajorVersion($majorversion);
      $major->save();
    }
  }

}

/**
 * Update view definitions.
 */
function drd_update_8002() {
  $config_path = drupal_get_path('module', 'drd') . '/config/optional/views.view.drd_';
  foreach (['domains_per_project', 'project', 'releases_per_domain'] as $view) {
    $data = Yaml::decode(file_get_contents($config_path . $view . '.yml'));
    \Drupal::configFactory()
      ->getEditable('views.view.drd_' . $view)
      ->setData($data)
      ->save(TRUE);
  }
  return "DRD views have been updated.";
}

/**
 * Reset all encryption keys.
 */
function drd_update_8003() {
  $n = 0;
  foreach (Domain::loadMultiple() as $domain) {
    /** @var \Drupal\drd\Entity\DomainInterface $domain */
    $domain->resetCryptSettings();
    $n++;
  }
  return t('Successfully reset :n domains.', [':n' => $n]);
}
