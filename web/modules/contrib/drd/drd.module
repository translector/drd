<?php

/**
 * @file
 * Main module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;
use Drupal\drd\Entity\DomainInterface;
use Drupal\drd\Plugin\Action\BaseEntityInterface;

/**
 * Implements hook_cron().
 */
function drd_cron() {
  \Drupal::service('drd.cleanup')->execute();
}

/**
 * Implements hook_entity_operation().
 *
 * {@inheritdoc}
 */
function drd_entity_operation(EntityInterface $entity) {
  $operations = [];
  if ($entity instanceof DomainInterface && !empty($entity->getName())) {
    $operations['reset'] = [
      'title' => t('Reset'),
      'url' => $entity->toUrl('reset-form'),
      'weight' => 99,
    ];
  }
  return $operations;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function drd_entity_extra_field_info() {
  $extra = [];
  $description = t('DRD module element');
  foreach (['drd_host', 'drd_core', 'drd_domain'] as $type) {
    $extra[$type][$type]['display']['actions'] = [
      'label' => t('Actions'),
      'description' => $description,
      'weight' => -100,
      'visible' => TRUE,
    ];
  }

  $extra['drd_domain']['drd_domain']['display']['latest_ping_status'] = [
    'label' => t('Latest ping status'),
    'description' => $description,
    'weight' => -99,
    'visible' => TRUE,
  ];

  $extra['drd_domain']['drd_domain']['display']['messages'] = [
    'label' => t('Messages'),
    'description' => $description,
    'weight' => -98,
    'visible' => TRUE,
  ];

  $extra['drd_domain']['drd_domain']['display']['review'] = [
    'label' => t('Review'),
    'description' => $description,
    'weight' => 99,
    'visible' => TRUE,
  ];

  $extra['drd_domain']['drd_domain']['display']['status_report'] = [
    'label' => t('Status Report'),
    'description' => $description,
    'weight' => 100,
    'visible' => TRUE,
  ];

  $extra['drd_domain']['drd_domain']['display']['monitoring'] = [
    'label' => t('Monitoring'),
    'description' => $description,
    'weight' => 101,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_page_attachments().
 *
 * {@inheritdoc}
 */
function drd_page_attachments(array &$attachments) {
  if (\Drupal::currentUser()->hasPermission('drd.access')) {
    $attachments['#attached']['library'][] = 'drd/general';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * {@inheritdoc}
 */
function drd_preprocess_html(&$variables) {
  $path_args = explode('/', \Drupal::request()->getPathInfo());
  $count = count($path_args);
  if ($count > 1 && $path_args[1] == 'drd') {
    $variables['attributes']['class'][] = 'drd';
    $classes = [];
    if ($count == 2) {
      $classes[] = 'drd-dashboard';
      $classes[] = 'drd-main-level';
    }
    else {
      $classes[] = 'drd-' . $path_args[2];
      if ($count == 3) {
        $classes[] = 'drd-main-level';
      }
    }
    $variables['attributes']['class'] = array_merge($variables['attributes']['class'], $classes);
  }
}

/**
 * Implements hook_theme().
 */
function drd_theme() {
  return [
    'drd_core' => [
      'render element' => 'elements',
    ],
    'drd_domain' => [
      'render element' => 'elements',
    ],
    'drd_host' => [
      'render element' => 'elements',
    ],
    'drd_major' => [
      'render element' => 'elements',
    ],
    'drd_project' => [
      'render element' => 'elements',
    ],
    'drd_release' => [
      'render element' => 'elements',
    ],
    'drd_requirement' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for Core templates.
 *
 * Default template: drd-core.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the core information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_drd_core(array &$variables) {
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for Domain templates.
 *
 * Default template: drd-domain.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the domain information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_drd_domain(array &$variables) {
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for Host templates.
 *
 * Default template: drd-host.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the host information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_drd_host(array &$variables) {
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for Major templates.
 *
 * Default template: drd-major.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the major information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_drd_major(array &$variables) {
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for Project templates.
 *
 * Default template: drd-project.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the project information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_drd_project(array &$variables) {
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for Release templates.
 *
 * Default template: drd-release.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the release information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_drd_release(array &$variables) {
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for Requirement templates.
 *
 * Default template: drd-requirement.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: associative array containing the requirement information
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_drd_requirement(array &$variables) {
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}
